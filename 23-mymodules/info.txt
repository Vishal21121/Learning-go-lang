Those commands in which we write anything after go mod are expensive commands

go versioning follows semantic versioning
Semantic Versioning 2.0.0 for more info visit the link -> https://semver.org/
Summary
Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes
MINOR version when you add functionality in a backwards compatible manner
PATCH version when you make backwards compatible bug fixes
Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.

go toolchain :  it is the way we pull in all the dependencies

gorilla/go mux provides command for fetching the code and this command takes the code from the web

if // indirect is mentioned in the package then it means it is not being used in your project

go.sum -> it makes sure that nothing is changed in the package which is being used. This file lists down the checksum of direct and indirect dependency required along with the version. It is to be mentioned that the go.mod file is enough for a successful build. They why go.sum file is needed?. The checksum present in go.sum file is used to validate the checksum of each of direct and indirect dependency to confirm that none of them has been modified.

go mod tidy (its expensive) -> go mod tidy ensures that the go. mod file matches the source code in the module. It adds any missing module requirements necessary to build the current module's packages and dependencies, if there are some not used dependencies go mod tidy will remove those from go. mod accordingly.

go mod verify -> go mod verify only checks that go. sum matches the contents of the module cache.

go list -m all -> it gives the list of all those dependencies on which our modules is dependent

go list -m -versions github.com/gorilla/mux -> it will give all the publicly available versions of that particular module

go mod why github.com/gorilla/mux -> it shows that which module is using the package github.com/gorilla/mux

go mod graph -> The go mod graph command prints the module requirement graph or the dependency of the graph on another graph (with replacements applied) in text form.

go mod edit -go versionNum -> this command is used to change the go version
go mod edit -moduel moduleNum -> this command is used to change the moduleName

go mod vendor -> The go mod vendor command constructs a directory named vendor in the main module's root directory that contains copies of all packages needed to support builds and tests of packages in the main module after executing this command if run the command go run main.go then the go will run the program based on the packages which are in cache or web package but we can run the program based on the vendor package by the command go run -mod=vendor main.go then it will look into the vendor folder